name: CI
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:


jobs:
  linter-and-license:
    name: Linter & License Check
    runs-on: ubuntu-22.04
    container: ghcr.io/jaxtonmax/hvisor-ci:22.04_pro
    steps:
      - name: Reset Rustup to Official Servers
        run: |
          echo "RUSTUP_DIST_SERVER=https://static.rust-lang.org" >> $GITHUB_ENV
          echo "RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup" >> $GITHUB_ENV
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Format Check
        run: make fmt-test
      - name: License Check
        run: ./tools/license_checker.sh

  unittest:
    name: Unittest
    runs-on: ubuntu-22.04
    container: ghcr.io/jaxtonmax/hvisor-ci:22.04_pro
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: aarch64, board: "qemu-gicv3" }
          - { arch: aarch64, board: "qemu-gicv2" }
          - { arch: riscv64, board: "qemu-plic" }
          - { arch: riscv64, board: "qemu-aia" }
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Reset Rustup to Official Servers
        run: |
          echo "RUSTUP_DIST_SERVER=https://static.rust-lang.org" >> $GITHUB_ENV
          echo "RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup" >> $GITHUB_ENV
      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV
      - name: Run Unit Test
        # 所有依赖已在镜像中，直接运行测试
        run: make test

  build:
    name: Build All Targets
    runs-on: ubuntu-22.04
    container: ghcr.io/jaxtonmax/hvisor-ci:22.04_pro
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: aarch64, board: "qemu-gicv3" }
          - { arch: aarch64, board: "qemu-gicv2" }
          - { arch: aarch64, board: "zcu102" }
          - { arch: aarch64, board: "imx8mp" }
          - { arch: aarch64, board: "rk3568" }
          - { arch: aarch64, board: "rk3588" }
          - { arch: aarch64, board: "ok6254-c" }
          - { arch: riscv64, board: "qemu-aia" }
          - { arch: riscv64, board: "qemu-plic" }
          # LoongArch 构建任务也在这里
          - { arch: loongarch64, board: "ls3a5000" }
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Reset Rustup to Official Servers
        run: |
          echo "RUSTUP_DIST_SERVER=https://static.rust-lang.org" >> $GITHUB_ENV
          echo "RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup" >> $GITHUB_ENV

      # --- 关键优化：为 LoongArch 动态加载工具链 ---
      - name: Cache and Install LoongArch Toolchain
        if: matrix.arch == 'loongarch64'
        uses: actions/cache@v4
        with:
          # 需要缓存的目录
          path: /opt/loongarch-toolchain
          # 缓存的唯一标识，如果工具链更新，可以修改这个 key 来刷新缓存
          key: ${{ runner.os }}-loongarch-toolchain-v8.0
      
      - name: Download LoongArch Toolchain if not cached
        if: matrix.arch == 'loongarch64' && steps.cache-loongarch.outputs.cache-hit != 'true'
        run: |
          mkdir -p /opt/loongarch-toolchain
          wget -qO- https://github.com/sunhaiyong1978/CLFS-for-LoongArch/releases/download/8.0/loongarch64-clfs-8.0-cross-tools-gcc-full.tar.xz | tar -xJ -C /opt/loongarch-toolchain

      - name: Add LoongArch Toolchain to PATH
        if: matrix.arch == 'loongarch64'
        run: echo "/opt/loongarch-toolchain/cross-tools/bin" >> $GITHUB_PATH
      
      # --- 核心构建步骤 ---
      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV
      - name: Build
        run: make

  systemtest:
    name: Systemtest
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/jaxtonmax/hvisor-ci:22.04_pro
      options: --cap-add=SYS_ADMIN --privileged
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: aarch64, board: "qemu-gicv3" }
          - { arch: riscv64, board: "qemu-plic" }
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Reset Rustup to Official Servers
        run: |
          echo "RUSTUP_DIST_SERVER=https://static.rust-lang.org" >> $GITHUB_ENV
          echo "RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup" >> $GITHUB_ENV

      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV

      - name: Run System Test
        # 解释：
        # 我们遇到的核心问题是，无论如何设置 CFLAGS，它都会被 hvisor-tool 内部的
        # 嵌套 Makefile 重置，导致我们的修复参数丢失。
        #
        # 最终解决方案：
        # 我们不再尝试修改 CFLAGS。我们将采取一种更强制的手段：直接修改 CC (C Compiler) 变量。
        # 我们将编译参数直接附加在编译器名称后面。当 make 调用 $(CC) 时，它会展开成
        # 一个包含了我们所有参数的完整命令。
        # 这种方法几乎不可能被 Makefile 内部的逻辑所覆盖，是解决此类顽固问题的终极手段。
        #
        # 1. 我们为不同的架构定义了正确的交叉编译器名称。
        # 2. 我们将 --sysroot 和解决 glibc 问题的 -U... -D... 参数直接附加在编译器后面。
        # 3. 我们将这个完整的命令导出为 CC 环境变量。
        # 4. 我们继续使用 `make -e` 标志，确保这个 CC 环境变量能够覆盖 Makefile 内部可能存在的任何 CC 定义。
        run: |
          case "${{ matrix.arch }}" in
            riscv64)
              export CC="riscv64-linux-gnu-gcc --sysroot=/usr/riscv64-linux-gnu -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0"
              ;;
            aarch64)
              export CC="aarch64-linux-gnu-gcc --sysroot=/usr/aarch64-linux-gnu -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0"
              ;;
          esac
          
          # 我们不再需要单独设置 CFLAGS，因为所有参数都已经包含在 CC 变量里了。
          # 我们依然使用 -e 标志来确保我们导出的 CC 环境变量能够覆盖 Makefile 中的任何设置。
          make -e stest