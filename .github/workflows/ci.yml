name: CI
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:


jobs:
  linter-and-license:
    name: Linter & License Check
    runs-on: ubuntu-22.04
    container: ghcr.io/jaxtonmax/hvisor-ci:22.04_pro
    steps:
      - name: Reset Rustup to Official Servers
        run: |
          echo "RUSTUP_DIST_SERVER=https://static.rust-lang.org" >> $GITHUB_ENV
          echo "RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup" >> $GITHUB_ENV
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Format Check
        run: make fmt-test
      - name: License Check
        run: ./tools/license_checker.sh

  unittest:
    name: Unittest
    runs-on: ubuntu-22.04
    container: ghcr.io/jaxtonmax/hvisor-ci:22.04_pro
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: aarch64, board: "qemu-gicv3" }
          - { arch: aarch64, board: "qemu-gicv2" }
          - { arch: riscv64, board: "qemu-plic" }
          - { arch: riscv64, board: "qemu-aia" }
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Reset Rustup to Official Servers
        run: |
          echo "RUSTUP_DIST_SERVER=https://static.rust-lang.org" >> $GITHUB_ENV
          echo "RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup" >> $GITHUB_ENV
      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV
      - name: Run Unit Test
        # 所有依赖已在镜像中，直接运行测试
        run: make test

  build:
    name: Build All Targets
    runs-on: ubuntu-22.04
    container: ghcr.io/jaxtonmax/hvisor-ci:22.04_pro
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: aarch64, board: "qemu-gicv3" }
          - { arch: aarch64, board: "qemu-gicv2" }
          - { arch: aarch64, board: "zcu102" }
          - { arch: aarch64, board: "imx8mp" }
          - { arch: aarch64, board: "rk3568" }
          - { arch: aarch64, board: "rk3588" }
          - { arch: aarch64, board: "ok6254-c" }
          - { arch: riscv64, board: "qemu-aia" }
          - { arch: riscv64, board: "qemu-plic" }
          # LoongArch 构建任务也在这里
          - { arch: loongarch64, board: "ls3a5000" }
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Reset Rustup to Official Servers
        run: |
          echo "RUSTUP_DIST_SERVER=https://static.rust-lang.org" >> $GITHUB_ENV
          echo "RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup" >> $GITHUB_ENV

      # --- 关键优化：为 LoongArch 动态加载工具链 ---
      - name: Cache and Install LoongArch Toolchain
        if: matrix.arch == 'loongarch64'
        uses: actions/cache@v4
        with:
          # 需要缓存的目录
          path: /opt/loongarch-toolchain
          # 缓存的唯一标识，如果工具链更新，可以修改这个 key 来刷新缓存
          key: ${{ runner.os }}-loongarch-toolchain-v8.0
      
      - name: Download LoongArch Toolchain if not cached
        if: matrix.arch == 'loongarch64' && steps.cache-loongarch.outputs.cache-hit != 'true'
        run: |
          mkdir -p /opt/loongarch-toolchain
          wget -qO- https://github.com/sunhaiyong1978/CLFS-for-LoongArch/releases/download/8.0/loongarch64-clfs-8.0-cross-tools-gcc-full.tar.xz | tar -xJ -C /opt/loongarch-toolchain

      - name: Add LoongArch Toolchain to PATH
        if: matrix.arch == 'loongarch64'
        run: echo "/opt/loongarch-toolchain/cross-tools/bin" >> $GITHUB_PATH
      
      # --- 核心构建步骤 ---
      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV
      - name: Build
        run: make

  systemtest:
    name: Systemtest
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/jaxtonmax/hvisor-ci:22.04_pro
      options: --cap-add=SYS_ADMIN --privileged
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: aarch64, board: "qemu-gicv3" }
          - { arch: riscv64, board: "qemu-plic" }
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Reset Rustup to Official Servers
        run: |
          echo "RUSTUP_DIST_SERVER=https://static.rust-lang.org" >> $GITHUB_ENV
          echo "RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup" >> $GITHUB_ENV

      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV

      - name: Run System Test
        # 解释：
        # 根本问题是交叉编译器在编译 cJSON 子模块时，没有找到正确的系统头文件路径，
        # 导致 #include_next <limits.h> 失败。
        # 之前的解决方案尝试通过 `export CC=... --sysroot=...` 来修正，但这在复杂的
        # Makefile 调用链中（特别是依赖生成规则）可能会失效。
        #
        # 最终解决方案：
        # 我们采用一种更明确、更强制的方式。除了设置 CC 和 --sysroot，我们还显式地
        # 使用 CFLAGS 环境变量，通过 -I 参数直接将正确的头文件搜索路径注入到每一次
        # 编译器调用中。
        # 1. `-I/usr/{arch}-linux-gnu/include`: 这是目标架构的 C 库头文件所在位置。
        # 2. `-I/usr/lib/gcc-cross/{arch}-linux-gnu/11/include-fixed`: 这是 GCC 
        #    为解决 #include_next 这类问题提供的修正头文件路径。
        # 3. 我们继续使用 `make -e` 确保这些环境变量能够覆盖 Makefile 内部的定义。
        run: |
          case "${{ matrix.arch }}" in
            riscv64)
              export CC="riscv64-linux-gnu-gcc --sysroot=/usr/riscv64-linux-gnu"
              export CFLAGS="-I/usr/riscv64-linux-gnu/include -I/usr/lib/gcc-cross/riscv64-linux-gnu/11/include-fixed -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0"
              ;;
            aarch64)
              export CC="aarch64-linux-gnu-gcc --sysroot=/usr/aarch64-linux-gnu"
              # 注意：这里的 '11' 是基于您 riscv64 环境中的 GCC 版本。如果 aarch64 使用不同版本的 GCC，需要相应调整。
              # 在 ghcr.io/jaxtonmax/hvisor-ci:22.04_pro 镜像中，版本是相同的。
              export CFLAGS="-I/usr/aarch64-linux-gnu/include -I/usr/lib/gcc-cross/aarch64-linux-gnu/11/include-fixed -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0"
              ;;
          esac
          
          make -e stest